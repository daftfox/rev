import { Socket } from 'net';

const versionByteArrayBuffer = Buffer.from([
    0xf9,
    0x02,
    0x05,
    0xf0,
    0x79,
    0x02,
    0x05,
    0x4d,
    0x00,
    0x61,
    0x00,
    0x6a,
    0x00,
    0x6f,
    0x00,
    0x72,
    0x00,
    0x54,
    0x00,
    0x6f,
    0x00,
    0x6d,
    0x00,
    0x2e,
    0x00,
    0x69,
    0x00,
    0x6e,
    0x00,
    0x6f,
    0x00,
    0xf7,
]);
const capabilitiesByteArrayBuffer = Buffer.from([
    0xf0,
    0x6c,
    0x00,
    0x01,
    0x0b,
    0x01,
    0x01,
    0x01,
    0x03,
    0x0a,
    0x04,
    0x0e,
    0x7f,
    0x00,
    0x01,
    0x0b,
    0x01,
    0x01,
    0x01,
    0x03,
    0x0a,
    0x04,
    0x0e,
    0x7f,
    0x00,
    0x01,
    0x0b,
    0x01,
    0x01,
    0x01,
    0x03,
    0x0a,
    0x04,
    0x0e,
    0x7f,
    0x00,
    0x01,
    0x0b,
    0x01,
    0x01,
    0x01,
    0x03,
    0x0a,
    0x04,
    0x0e,
    0x7f,
    0x00,
    0x01,
    0x0b,
    0x01,
    0x01,
    0x01,
    0x03,
    0x0a,
    0x04,
    0x0e,
    0x06,
    0x01,
    0x7f,
    0x00,
    0x01,
    0x0b,
    0x01,
    0x01,
    0x01,
    0x03,
    0x0a,
    0x04,
    0x0e,
    0x06,
    0x01,
    0x7f,
    0x7f,
    0x7f,
    0x7f,
    0x7f,
    0x7f,
    0x7f,
    0x00,
    0x01,
    0x0b,
    0x01,
    0x01,
    0x01,
    0x03,
    0x0a,
    0x04,
    0x0e,
    0x7f,
    0x00,
    0x01,
    0x0b,
    0x01,
    0x01,
    0x01,
    0x03,
    0x0a,
    0x04,
    0x0e,
    0x7f,
    0x00,
    0x01,
    0x0b,
    0x01,
    0x01,
    0x01,
    0x03,
    0x0a,
    0x04,
    0x0e,
    0x7f,
    0x00,
    0x01,
    0x0b,
    0x01,
    0x01,
    0x01,
    0x03,
    0x0a,
    0x04,
    0x0e,
    0x7f,
    0x00,
    0x01,
    0x0b,
    0x01,
    0x01,
    0x01,
    0x03,
    0x0a,
    0x04,
    0x0e,
    0x7f,
    0x02,
    0x0a,
    0x7f,
    0xf7,
]);
const analogMappingByteArrayBuffer = Buffer.from([
    0xf0,
    0x6a,
    0x7f,
    0x7f,
    0x7f,
    0x7f,
    0x7f,
    0x7f,
    0x7f,
    0x7f,
    0x7f,
    0x7f,
    0x7f,
    0x7f,
    0x7f,
    0x7f,
    0x7f,
    0x7f,
    0x7f,
    0x00,
    0xf7,
]);

export class BoardMock {
    socket: Socket;

    constructor() {
        this.socket = new Socket();
        this.socket.connect({ host: 'localhost', port: 9000 }, () => {
            this.socket.on('data', this.handleRequest);
        });
    }

    close() {
        this.socket.end();
        this.socket.destroy();
    }

    handleRequest = (data: Buffer): void => {
        if (data[0] === 0xf9) {
            this.sendQueryFirmwareReply();
        } else if (data[0] === 0xf0 && data[1] === 0x6b) {
            this.sendCapabilitiesReport();
        } else if (data[0] === 0xf0 && data[1] === 0x69) {
            this.sendAnalogMapping();
        }
    };

    sendQueryFirmwareReply(): void {
        this.socket.write(versionByteArrayBuffer);
    }

    sendCapabilitiesReport(): void {
        this.socket.write(capabilitiesByteArrayBuffer);
    }

    sendAnalogMapping(): void {
        this.socket.write(analogMappingByteArrayBuffer);
    }
}
